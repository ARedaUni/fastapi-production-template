services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: practicepython-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: practicepython
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_local_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d practicepython"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    # Security: Run as non-root user
    user: postgres

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: practicepython-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network
    # Security: Run as non-root user
    user: redis

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: practicepython-app
    restart: unless-stopped
    environment:
      # Database - Use Docker PostgreSQL service
      POSTGRES_HOST: postgres
      POSTGRES_DB: practicepython
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_local_password}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Application
      PROJECT_NAME: ${PROJECT_NAME:-PracticePython}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      SECRET_KEY: ${SECRET_KEY:-docker_development_secret_key_32_chars_minimum}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # Initial User
      FIRST_USERNAME: ${FIRST_USERNAME:-admin}
      FIRST_PASSWORD: ${FIRST_PASSWORD:-admin_password_123}
      
      # CORS
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network
    # Security: Container runs as non-root user (defined in Dockerfile)

  # Database Migration & Seeding (Init Container)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: practicepython-migrate
    environment:
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_DB: practicepython
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_local_password}
      
      # Application
      SECRET_KEY: ${SECRET_KEY:-docker_development_secret_key_32_chars_minimum}
      FIRST_USERNAME: ${FIRST_USERNAME:-admin}
      FIRST_PASSWORD: ${FIRST_PASSWORD:-admin_password_123}
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Seeding initial data...' &&
        python scripts/seed_data.py &&
        echo 'Database setup complete!'
      "
    networks:
      - app-network
    # This container runs once and exits

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network for service communication
networks:
  app-network:
    driver: bridge 